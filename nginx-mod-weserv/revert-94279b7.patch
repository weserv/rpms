From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 12 Aug 2024 15:05:00 +0200
Subject: [PATCH 1/1] Revert "Migrate to Catch2 v3"

This reverts commit 94279b7d23b970a4e00bf01cbd08890c61646c11.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -70,7 +70,7 @@ include(FetchContent)
 include(GNUInstallDirs)
 
 # Find Catch2 (optional)
-find_package(Catch2 3.0.1 QUIET)
+find_package(Catch2 2.7.1 QUIET)
 
 # Find libvips (required)
 find_package(PkgConfig)
diff --git a/test/api/base.cpp b/test/api/base.cpp
index 1111111..2222222 100644
--- a/test/api/base.cpp
+++ b/test/api/base.cpp
@@ -1,6 +1,8 @@
 #include "base.h"
 
-#include <catch2/catch_session.hpp>
+#define CATCH_CONFIG_RUNNER
+
+#include <catch2/catch.hpp>
 
 #include "test_environment.h"
 
@@ -128,7 +130,7 @@ int main(const int argc, const char *argv[]) {
 
     auto cli =
         session.cli() |
-        Catch::Clara::Opt(fixtures_dir,
+        Catch::clara::Opt(fixtures_dir,
                           "fixtures directory")["-F"]["--fixtures-directory"](
             "change fixtures directory");
 
diff --git a/test/api/exceptions/unit-invalid.cpp b/test/api/exceptions/unit-invalid.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-invalid.cpp
+++ b/test/api/exceptions/unit-invalid.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("invalid image", "[invalid]") {
     SECTION("buffer") {
diff --git a/test/api/exceptions/unit-large.cpp b/test/api/exceptions/unit-large.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-large.cpp
+++ b/test/api/exceptions/unit-large.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("too large image", "[large]") {
     SECTION("input") {
diff --git a/test/api/exceptions/unit-other.cpp b/test/api/exceptions/unit-other.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-other.cpp
+++ b/test/api/exceptions/unit-other.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("libvips error", "[other]") {
     SECTION("input file") {
diff --git a/test/api/exceptions/unit-timeout.cpp b/test/api/exceptions/unit-timeout.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-timeout.cpp
+++ b/test/api/exceptions/unit-timeout.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("process timeout", "[timeout]") {
     SECTION("image") {
diff --git a/test/api/exceptions/unit-unreadable.cpp b/test/api/exceptions/unit-unreadable.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-unreadable.cpp
+++ b/test/api/exceptions/unit-unreadable.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("unreadable image", "[unreadable]") {
     SECTION("buffer") {
diff --git a/test/api/exceptions/unit-unsupported.cpp b/test/api/exceptions/unit-unsupported.cpp
index 1111111..2222222 100644
--- a/test/api/exceptions/unit-unsupported.cpp
+++ b/test/api/exceptions/unit-unsupported.cpp
@@ -1,9 +1,10 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
-using Catch::Matchers::ContainsSubstring;
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
 
 TEST_CASE("unsupported saver", "[unsupported]") {
     SECTION("json") {
diff --git a/test/api/max_color_distance.h b/test/api/max_color_distance.h
index 1111111..2222222 100644
--- a/test/api/max_color_distance.h
+++ b/test/api/max_color_distance.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include <catch2/matchers/catch_matchers.hpp>
+#include <catch2/catch.hpp>
 #include <vips/vips8>
 
 #include <utility>
@@ -11,7 +11,7 @@ using vips::VImage;
  * Verifies the maximum color distance using the DE2000 algorithm
  * between two images of the same dimensions and number of channels.
  */
-class MaxColorDistance : public Catch::Matchers::MatcherBase<VImage> {
+class MaxColorDistance : public Catch::MatcherBase<VImage> {
  public:
     explicit MaxColorDistance(VImage expected, const double accepted_distance)
         : expected_image_(std::move(expected)),
diff --git a/test/api/parsers/unit-color.cpp b/test/api/parsers/unit-color.cpp
index 1111111..2222222 100644
--- a/test/api/parsers/unit-color.cpp
+++ b/test/api/parsers/unit-color.cpp
@@ -1,6 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
-#include <catch2/matchers/catch_matchers_vector.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
diff --git a/test/api/parsers/unit-query.cpp b/test/api/parsers/unit-query.cpp
index 1111111..2222222 100644
--- a/test/api/parsers/unit-query.cpp
+++ b/test/api/parsers/unit-query.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-alignment.cpp b/test/api/processors/unit-alignment.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-alignment.cpp
+++ b/test/api/processors/unit-alignment.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-background.cpp b/test/api/processors/unit-background.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-background.cpp
+++ b/test/api/processors/unit-background.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../max_color_distance.h"
diff --git a/test/api/processors/unit-blur.cpp b/test/api/processors/unit-blur.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-blur.cpp
+++ b/test/api/processors/unit-blur.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-brightness.cpp b/test/api/processors/unit-brightness.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-brightness.cpp
+++ b/test/api/processors/unit-brightness.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-contrast.cpp b/test/api/processors/unit-contrast.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-contrast.cpp
+++ b/test/api/processors/unit-contrast.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-crop.cpp b/test/api/processors/unit-crop.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-crop.cpp
+++ b/test/api/processors/unit-crop.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-embed.cpp b/test/api/processors/unit-embed.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-embed.cpp
+++ b/test/api/processors/unit-embed.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-filter.cpp b/test/api/processors/unit-filter.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-filter.cpp
+++ b/test/api/processors/unit-filter.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-gamma.cpp b/test/api/processors/unit-gamma.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-gamma.cpp
+++ b/test/api/processors/unit-gamma.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-mask.cpp b/test/api/processors/unit-mask.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-mask.cpp
+++ b/test/api/processors/unit-mask.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-modulate.cpp b/test/api/processors/unit-modulate.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-modulate.cpp
+++ b/test/api/processors/unit-modulate.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../max_color_distance.h"
diff --git a/test/api/processors/unit-orientation.cpp b/test/api/processors/unit-orientation.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-orientation.cpp
+++ b/test/api/processors/unit-orientation.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-rotation.cpp b/test/api/processors/unit-rotation.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-rotation.cpp
+++ b/test/api/processors/unit-rotation.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-sharpen.cpp b/test/api/processors/unit-sharpen.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-sharpen.cpp
+++ b/test/api/processors/unit-sharpen.cpp
@@ -1,5 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-stream.cpp b/test/api/processors/unit-stream.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-stream.cpp
+++ b/test/api/processors/unit-stream.cpp
@@ -1,15 +1,17 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 
 #include <vips/vips8>
 
-using Catch::Matchers::ContainsSubstring;
 using Catch::Matchers::Equals;
 using Catch::Matchers::StartsWith;
 using vips::VImage;
 
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
+
 TEST_CASE("output", "[stream]") {
     SECTION("jpeg") {
         auto test_image = fixtures->input_jpg;
diff --git a/test/api/processors/unit-thumbnail.cpp b/test/api/processors/unit-thumbnail.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-thumbnail.cpp
+++ b/test/api/processors/unit-thumbnail.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/processors/unit-tint.cpp b/test/api/processors/unit-tint.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-tint.cpp
+++ b/test/api/processors/unit-tint.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../max_color_distance.h"
diff --git a/test/api/processors/unit-trim.cpp b/test/api/processors/unit-trim.cpp
index 1111111..2222222 100644
--- a/test/api/processors/unit-trim.cpp
+++ b/test/api/processors/unit-trim.cpp
@@ -1,4 +1,4 @@
-#include <catch2/catch_test_macros.hpp>
+#include <catch2/catch.hpp>
 
 #include "../base.h"
 #include "../similar_image.h"
diff --git a/test/api/similar_image.h b/test/api/similar_image.h
index 1111111..2222222 100644
--- a/test/api/similar_image.h
+++ b/test/api/similar_image.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include <catch2/matchers/catch_matchers.hpp>
+#include <catch2/catch.hpp>
 #include <vips/vips8>
 
 using vips::VImage;
@@ -8,7 +8,7 @@ using vips::VImage;
 /**
  * The similar image matcher class
  */
-class SimilarImage : public Catch::Matchers::MatcherBase<VImage> {
+class SimilarImage : public Catch::MatcherBase<VImage> {
  public:
     explicit SimilarImage(const VImage &expected, const int threshold)
         : expected_hash_(dhash(expected)), threshold_(threshold) {}
diff --git a/test/api/utils/unit-status.cpp b/test/api/utils/unit-status.cpp
index 1111111..2222222 100644
--- a/test/api/utils/unit-status.cpp
+++ b/test/api/utils/unit-status.cpp
@@ -1,11 +1,13 @@
-#include <catch2/catch_test_macros.hpp>
-#include <catch2/matchers/catch_matchers_string.hpp>
+#include <catch2/catch.hpp>
 
 #include <weserv/utils/status.h>
 
-using Catch::Matchers::ContainsSubstring;
 using weserv::api::utils::Status;
 
+constexpr auto ContainsSubstring = [](const std::string &str) {
+    return Catch::Matchers::Contains(str);
+};
+
 TEST_CASE("status", "[status]") {
     SECTION("ok returns true when appropriate") {
         CHECK(Status::OK.ok());
diff --git a/third_party/catch2/CMakeLists.txt b/third_party/catch2/CMakeLists.txt
index 1111111..2222222 100644
--- a/third_party/catch2/CMakeLists.txt
+++ b/third_party/catch2/CMakeLists.txt
@@ -1,6 +1,6 @@
 FetchContent_Declare(catch2
         GIT_REPOSITORY https://github.com/catchorg/Catch2.git
-        GIT_TAG v3.8.1
+        GIT_TAG v2.13.10
         )
 
 FetchContent_MakeAvailable(catch2)
