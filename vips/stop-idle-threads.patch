From 164e5010cd9e1ef4e376a6f86341e38602fae4a4 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 30 Dec 2022 16:41:52 +0100
Subject: [PATCH] Stop idle threads after 15 seconds

In line with the previous behaviour of GLib's threadpool.
---
 libvips/include/vips/internal.h |  2 ++
 libvips/iofuncs/semaphore.c     | 39 +++++++++++++++++++++++++++++++++
 libvips/iofuncs/threadset.c     | 28 +++++++++++------------
 3 files changed, 54 insertions(+), 15 deletions(-)

diff --git a/libvips/include/vips/internal.h b/libvips/include/vips/internal.h
index a9f2802f1f..eb31a62e13 100644
--- a/libvips/include/vips/internal.h
+++ b/libvips/include/vips/internal.h
@@ -160,6 +160,8 @@ int vips__object_leak( void );
 int vips__open_image_read( const char *filename );
 int vips__open_image_write( const char *filename, gboolean temp );
 
+int vips__semaphore_down_timed( VipsSemaphore *s, int timeout_s );
+
 /* im_image_open_input() needs to have this visible.
  */
 #if VIPS_ENABLE_DEPRECATED
diff --git a/libvips/iofuncs/semaphore.c b/libvips/iofuncs/semaphore.c
index d627a420e5..62f83a8c88 100644
--- a/libvips/iofuncs/semaphore.c
+++ b/libvips/iofuncs/semaphore.c
@@ -144,3 +144,42 @@ vips_semaphore_down( VipsSemaphore *s )
 {
 	return( vips_semaphore_downn( s, 1 ) );
 }
+
+/* Waits until sem > 0, then decrement.
+ * Returns -1 when the relative time in @timeout_s (in seconds) was passed.
+ */
+int
+vips__semaphore_down_timed( VipsSemaphore *s, int timeout_s )
+{
+	gint64 end_time;
+	int value_after_op;
+
+	VIPS_GATE_START( "vips_semaphore_down_timed: wait" );
+
+	g_mutex_lock( s->mutex );
+
+	end_time = g_get_monotonic_time() + timeout_s * G_TIME_SPAN_SECOND;
+	while( s->v < 1 )
+		if( !g_cond_wait_until( s->cond, s->mutex, end_time ) ) {
+			/* timeout has passed.
+			 */
+			g_mutex_unlock( s->mutex );
+
+			VIPS_GATE_STOP( "vips_semaphore_down_timed: wait" );
+			return( -1 );
+		}
+
+	s->v -= 1;
+	value_after_op = s->v;
+
+	g_mutex_unlock( s->mutex );
+
+#ifdef DEBUG_IO
+	printf( "vips__semaphore_down_timed(\"%s\",%d): %d\n", 
+		s->name, n, value_after_op );
+#endif /*DEBUG_IO*/
+
+	VIPS_GATE_STOP( "vips_semaphore_down_timed: wait" );
+
+	return( value_after_op );
+}
diff --git a/libvips/iofuncs/threadset.c b/libvips/iofuncs/threadset.c
index 4e9cb10ce2..2a96f4513a 100644
--- a/libvips/iofuncs/threadset.c
+++ b/libvips/iofuncs/threadset.c
@@ -62,7 +62,6 @@ typedef struct _VipsThreadsetMember {
 	const char *domain;
 	GFunc func; 
 	void *data;
-	void *user_data;
 
 	/* The thread waits on this when it's free.
 	 */
@@ -101,9 +100,13 @@ vips_threadset_work( void *pointer )
 	VipsThreadset *set = member->set;
 
 	for(;;) {
-		/* Wait to be given work.
+		/* Wait for at least 15 seconds to be given work.
+		 */
+		if( vips__semaphore_down_timed( &member->idle, 15 ) == -1 )
+			break;
+
+		/* Killed or no task available? Leave this thread.
 		 */
-		vips_semaphore_down( &member->idle );
 		if( member->kill ||
 			!member->func ) 
 			break;
@@ -115,7 +118,7 @@ vips_threadset_work( void *pointer )
 
 		/* Execute the task.
 		 */
-		member->func( member->data, member->user_data );
+		member->func( member->data, NULL );
 
 		/* Free any thread-private resources -- they will not be
 		 * useful for the next task to use this thread.
@@ -125,7 +128,6 @@ vips_threadset_work( void *pointer )
 		member->domain = NULL;
 		member->func = NULL;
 		member->data = NULL;
-		member->user_data = NULL;
 
 		/* We are free ... back on the free list!
 		 */
@@ -134,9 +136,13 @@ vips_threadset_work( void *pointer )
 		g_mutex_unlock( set->lock );
 	}
 
-	/* Kill has been requested. We leave this thread on the members 
-	 * list so it can be found and joined.
+	/* Timed-out or kill has been requested ... remove from the free list.
+	 * Leave this thread on the members list, so it can be found and joined.
 	 */
+	g_mutex_lock( set->lock );
+	set->free = g_slist_remove( set->free, member );
+	set->n_threads -= 1;
+	g_mutex_unlock( set->lock );
 
 	return( NULL );
 }
@@ -263,7 +269,6 @@ vips_threadset_run( VipsThreadset *set,
 	member->domain = domain;
 	member->func = func;
 	member->data = data;
-	member->user_data = NULL;
 	vips_semaphore_up( &member->idle );
 
 	return( 0 );
@@ -274,19 +279,12 @@ vips_threadset_run( VipsThreadset *set,
 static void
 vips_threadset_kill_member( VipsThreadsetMember *member )
 {
-	VipsThreadset *set = member->set;
-
 	member->kill = TRUE;
 	vips_semaphore_up( &member->idle );
 	g_thread_join( member->thread );
 
 	vips_semaphore_destroy( &member->idle );
 
-	g_mutex_lock( set->lock );
-	set->free = g_slist_remove( set->free, member );
-	set->n_threads -= 1;
-	g_mutex_unlock( set->lock );
-
 	VIPS_FREE( member );
 }
 
