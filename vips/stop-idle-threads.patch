From 7f4e6c91987a035e4b041ad2ced247c661dbec64 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 30 Dec 2022 16:41:52 +0100
Subject: [PATCH 1/5] threadset: stop idle threads after a regular timeout

In line with the previous behaviour of GLib's threadpool.
---
 libvips/include/vips/internal.h |  2 ++
 libvips/iofuncs/semaphore.c     | 40 +++++++++++++++++++++++++++++++++
 libvips/iofuncs/threadset.c     | 28 ++++++++++++++---------
 3 files changed, 59 insertions(+), 11 deletions(-)

diff --git a/libvips/include/vips/internal.h b/libvips/include/vips/internal.h
index a9f2802f1f..f28052d7f0 100644
--- a/libvips/include/vips/internal.h
+++ b/libvips/include/vips/internal.h
@@ -160,6 +160,8 @@ int vips__object_leak( void );
 int vips__open_image_read( const char *filename );
 int vips__open_image_write( const char *filename, gboolean temp );
 
+int vips__semaphore_down_timed( VipsSemaphore *s, double timeout_ms );
+
 /* im_image_open_input() needs to have this visible.
  */
 #if VIPS_ENABLE_DEPRECATED
diff --git a/libvips/iofuncs/semaphore.c b/libvips/iofuncs/semaphore.c
index d627a420e5..cd070ee6a6 100644
--- a/libvips/iofuncs/semaphore.c
+++ b/libvips/iofuncs/semaphore.c
@@ -144,3 +144,43 @@ vips_semaphore_down( VipsSemaphore *s )
 {
 	return( vips_semaphore_downn( s, 1 ) );
 }
+
+/* Waits until sem > 0, then decrement.
+ * Returns -1 when the relative time in @timeout_ms (in microseconds)
+ * was passed.
+ */
+int
+vips__semaphore_down_timed( VipsSemaphore *s, double timeout_ms )
+{
+	gint64 end_time;
+	int value_after_op;
+
+	VIPS_GATE_START( "vips_semaphore_down_timed: wait" );
+
+	g_mutex_lock( s->mutex );
+
+	end_time = g_get_monotonic_time() + timeout_ms;
+	while( s->v < 1 )
+		if( !g_cond_wait_until( s->cond, s->mutex, end_time ) ) {
+			/* timeout has passed.
+			 */
+			g_mutex_unlock( s->mutex );
+
+			VIPS_GATE_STOP( "vips_semaphore_down_timed: wait" );
+			return( -1 );
+		}
+
+	s->v -= 1;
+	value_after_op = s->v;
+
+	g_mutex_unlock( s->mutex );
+
+#ifdef DEBUG_IO
+	printf( "vips__semaphore_down_timed(\"%s\",%d): %d\n", 
+		s->name, n, value_after_op );
+#endif /*DEBUG_IO*/
+
+	VIPS_GATE_STOP( "vips_semaphore_down_timed: wait" );
+
+	return( value_after_op );
+}
diff --git a/libvips/iofuncs/threadset.c b/libvips/iofuncs/threadset.c
index 4e9cb10ce2..3267bffaef 100644
--- a/libvips/iofuncs/threadset.c
+++ b/libvips/iofuncs/threadset.c
@@ -92,6 +92,11 @@ struct _VipsThreadset {
 	int max_threads;
 };
 
+/* The maximum relative time (in microseconds) that a thread waits
+ * for work before being stopped.
+ */
+static const double max_idle_time = 15 * G_TIME_SPAN_SECOND;
+
 /* The thread work function.
  */
 static void *
@@ -101,9 +106,13 @@ vips_threadset_work( void *pointer )
 	VipsThreadset *set = member->set;
 
 	for(;;) {
-		/* Wait to be given work.
+		/* Wait for at least 15 seconds to be given work.
+		 */
+		if( vips__semaphore_down_timed( &member->idle, max_idle_time ) == -1 )
+			break;
+
+		/* Killed or no task available? Leave this thread.
 		 */
-		vips_semaphore_down( &member->idle );
 		if( member->kill ||
 			!member->func ) 
 			break;
@@ -134,9 +143,13 @@ vips_threadset_work( void *pointer )
 		g_mutex_unlock( set->lock );
 	}
 
-	/* Kill has been requested. We leave this thread on the members 
-	 * list so it can be found and joined.
+	/* Timed-out or kill has been requested ... remove from the free list.
+	 * Leave this thread on the members list, so it can be found and joined.
 	 */
+	g_mutex_lock( set->lock );
+	set->free = g_slist_remove( set->free, member );
+	set->n_threads -= 1;
+	g_mutex_unlock( set->lock );
 
 	return( NULL );
 }
@@ -274,19 +287,12 @@ vips_threadset_run( VipsThreadset *set,
 static void
 vips_threadset_kill_member( VipsThreadsetMember *member )
 {
-	VipsThreadset *set = member->set;
-
 	member->kill = TRUE;
 	vips_semaphore_up( &member->idle );
 	g_thread_join( member->thread );
 
 	vips_semaphore_destroy( &member->idle );
 
-	g_mutex_lock( set->lock );
-	set->free = g_slist_remove( set->free, member );
-	set->n_threads -= 1;
-	g_mutex_unlock( set->lock );
-
 	VIPS_FREE( member );
 }
 

From b73f161f11444187ac6e118ac5f1fb24a74b738f Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 30 Dec 2022 18:52:53 +0100
Subject: [PATCH 2/5] threadset: fix a small memory leak

---
 libvips/iofuncs/threadset.c | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

diff --git a/libvips/iofuncs/threadset.c b/libvips/iofuncs/threadset.c
index 3267bffaef..cbea6ba4c8 100644
--- a/libvips/iofuncs/threadset.c
+++ b/libvips/iofuncs/threadset.c
@@ -143,14 +143,19 @@ vips_threadset_work( void *pointer )
 		g_mutex_unlock( set->lock );
 	}
 
-	/* Timed-out or kill has been requested ... remove from the free list.
-	 * Leave this thread on the members list, so it can be found and joined.
+	/* Timed-out or kill has been requested ... remove from both free
+	 * and member list.
 	 */
 	g_mutex_lock( set->lock );
 	set->free = g_slist_remove( set->free, member );
+	set->members = g_slist_remove( set->members, member );
 	set->n_threads -= 1;
 	g_mutex_unlock( set->lock );
 
+	vips_semaphore_destroy( &member->idle );
+
+	VIPS_FREE( member );
+
 	return( NULL );
 }
 
@@ -287,13 +292,17 @@ vips_threadset_run( VipsThreadset *set,
 static void
 vips_threadset_kill_member( VipsThreadsetMember *member )
 {
+	GThread *thread;
+
+	thread = member->thread;
 	member->kill = TRUE;
+
 	vips_semaphore_up( &member->idle );
-	g_thread_join( member->thread );
 
-	vips_semaphore_destroy( &member->idle );
+	(void) g_thread_join( thread );
 
-	VIPS_FREE( member );
+	/* member is freed on thread exit.
+	 */
 }
 
 /** 
@@ -315,10 +324,8 @@ vips_threadset_free( VipsThreadset *set )
 
 		member = NULL;
 		g_mutex_lock( set->lock );
-		if( set->members ) {
+		if( set->members )
 			member = (VipsThreadsetMember *) set->members->data;
-			set->members = g_slist_remove( set->members, member );
-		}
 		g_mutex_unlock( set->lock );
 
 		if( !member )

From 46aee63a4f43e6486867208f5e049f42541eccd7 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 31 Dec 2022 16:37:36 +0100
Subject: [PATCH 3/5] Deprecate `vips_g_thread_join()` in favor of
 `g_thread_join()`

---
 libvips/deprecated/rename.c             |  6 ++++++
 libvips/include/vips/almostdeprecated.h |  3 +++
 libvips/include/vips/thread.h           |  2 --
 libvips/iofuncs/sinkscreen.c            |  2 +-
 libvips/iofuncs/thread.c                | 13 -------------
 5 files changed, 10 insertions(+), 16 deletions(-)

diff --git a/libvips/deprecated/rename.c b/libvips/deprecated/rename.c
index b312386e21..e3bc987e15 100644
--- a/libvips/deprecated/rename.c
+++ b/libvips/deprecated/rename.c
@@ -129,6 +129,12 @@ im_warning( const char *fmt, ... )
 	va_end( ap );
 }
 
+void *
+vips_g_thread_join( GThread *thread )
+{
+	return( g_thread_join( thread ) );
+}
+
 int 
 im_affine( IMAGE *in, IMAGE *out, 
 	double a, double b, double c, double d, double dx, double dy, 
diff --git a/libvips/include/vips/almostdeprecated.h b/libvips/include/vips/almostdeprecated.h
index 1f3df78b10..df8e0a8115 100644
--- a/libvips/include/vips/almostdeprecated.h
+++ b/libvips/include/vips/almostdeprecated.h
@@ -147,6 +147,9 @@ VIPS_DEPRECATED_FOR(g_warning)
 void im_warning( const char *fmt, ... )
 	G_GNUC_PRINTF( 1, 2 );
 
+VIPS_DEPRECATED_FOR(g_thread_join)
+void *vips_g_thread_join( GThread *thread );
+
 VIPS_DEPRECATED
 int im_iterate( VipsImage *im,
 	VipsStartFn start, im_generate_fn generate, VipsStopFn stop,
diff --git a/libvips/include/vips/thread.h b/libvips/include/vips/thread.h
index ac3cd5283b..347a711359 100644
--- a/libvips/include/vips/thread.h
+++ b/libvips/include/vips/thread.h
@@ -55,8 +55,6 @@ void vips_g_cond_free( GCond * );
  */
 VIPS_API
 GThread *vips_g_thread_new( const char *, GThreadFunc, gpointer );
-VIPS_API
-void *vips_g_thread_join( GThread *thread );
 
 VIPS_API
 gboolean vips_thread_isvips( void );
diff --git a/libvips/iofuncs/sinkscreen.c b/libvips/iofuncs/sinkscreen.c
index 3728e8d6d0..ebf34c396d 100644
--- a/libvips/iofuncs/sinkscreen.c
+++ b/libvips/iofuncs/sinkscreen.c
@@ -456,7 +456,7 @@ vips__render_shutdown( void )
 
 			vips_semaphore_up( &n_render_dirty_sem ); 
 
-			(void) vips_g_thread_join( thread );
+			(void) g_thread_join( thread );
 		}
 		else
 			g_mutex_unlock( render_dirty_lock );
diff --git a/libvips/iofuncs/thread.c b/libvips/iofuncs/thread.c
index ae75f6b2a6..4859538ccd 100644
--- a/libvips/iofuncs/thread.c
+++ b/libvips/iofuncs/thread.c
@@ -182,19 +182,6 @@ vips_g_thread_new( const char *domain, GThreadFunc func, gpointer data )
 	return( thread );
 }
 
-void *
-vips_g_thread_join( GThread *thread )
-{
-	void *result;
-
-	result = g_thread_join( thread );
-
-	VIPS_DEBUG_MSG_RED( "vips_g_thread_join: g_thread_join( %p )\n", 
-		thread );
-
-	return( result ); 
-}
-
 static int
 get_num_processors( void )
 {

From d91f38b44bb7b925b0befdb9facbbe4f7dcb086e Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 31 Dec 2022 15:01:46 +0100
Subject: [PATCH 4/5] threadset: ensure idle threads are freed on exit

GLib threads are spawned with `ref_count == 2`, this reference is
decreased during thread exit and associated resources are freed
during `g_thread_join()`. However, idle threads that are stopped
after a regular timeout are not joined. To fix this, decrease the
reference count during `vips_threadset_add()` and increase it just
before joining the thread with `g_thread_join()`.

See:
https://gitlab.gnome.org/GNOME/glib/-/blob/2d5d990c6ac7ff45bcc4485cce95e87687d47595/glib/gthread.c#L522
https://gitlab.gnome.org/GNOME/glib/-/blob/2d5d990c6ac7ff45bcc4485cce95e87687d47595/glib/gthread-posix.c#L1287
---
 libvips/iofuncs/threadset.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/libvips/iofuncs/threadset.c b/libvips/iofuncs/threadset.c
index cbea6ba4c8..9ad33bdf44 100644
--- a/libvips/iofuncs/threadset.c
+++ b/libvips/iofuncs/threadset.c
@@ -186,6 +186,11 @@ vips_threadset_add( VipsThreadset *set )
 		return( NULL );
 	}
 
+	/* Ensure idle threads are freed on exit, this
+	 * ref is increased before the thread is joined.
+	 */
+	g_thread_unref( member->thread );
+
 	g_mutex_lock( set->lock );
 	set->members = g_slist_prepend( set->members, member );
 	set->n_threads += 1;
@@ -294,7 +299,7 @@ vips_threadset_kill_member( VipsThreadsetMember *member )
 {
 	GThread *thread;
 
-	thread = member->thread;
+	thread = g_thread_ref( member->thread );
 	member->kill = TRUE;
 
 	vips_semaphore_up( &member->idle );

From c999cfb480fc45ac8afba282f7287bb6611c902e Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 31 Dec 2022 11:58:47 +0100
Subject: [PATCH 5/5] nit: remove extra semicolon

---
 libvips/iofuncs/threadset.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/libvips/iofuncs/threadset.c b/libvips/iofuncs/threadset.c
index 9ad33bdf44..f0a1aa7919 100644
--- a/libvips/iofuncs/threadset.c
+++ b/libvips/iofuncs/threadset.c
@@ -195,7 +195,7 @@ vips_threadset_add( VipsThreadset *set )
 	set->members = g_slist_prepend( set->members, member );
 	set->n_threads += 1;
 	set->n_threads_highwater = 
-		VIPS_MAX( set->n_threads_highwater, set->n_threads );;
+		VIPS_MAX( set->n_threads_highwater, set->n_threads );
 	g_mutex_unlock( set->lock );
 
 	return( member );
